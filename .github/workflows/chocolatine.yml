##
## EPITECH PROJECT, 2023
## chocolatine
## File description:
## chocolatine
##

name: chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: coding style
        run: check.sh $(pwd) $(pwd)

      - name: Create annotation for coding-style errors
        run:  |
          input=/tmp/coding-style-reports.log
          while IFS= read -r -a line; do
            fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${fields[2]} coding style error,file=${fields[0]},line=${fields[1]}::${fields[3]}"
          done < $input

      - name: Report style
        run: |
          NB_ERROR=$(cat /tmp/coding-style-reports.log | wc -l)
          if [ $NB_ERROR -gt 0 ]; then
            exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: compilation
        run: make

      - name: compilation
        run: make clean

      - name: file exist
        run: |
          OIFS=$IFS
          IFS=','
          for x in $EXECUTABLES
            do
              ./$x $ARGUMENTS
            done
          IFS=$OIFS

  run_tests:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    timeout-minutes: 2
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: compile_tests
        run: make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
